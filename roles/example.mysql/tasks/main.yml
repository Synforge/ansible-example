---
- name: Install the mysql packages 
  yum: name={{ item }} state=installed
  with_items:
    - libselinux-python
    - mysql-server
    - MySQL-python

- name: Copy the my.cnf file 
  template: src=my.cnf dest=/etc/my.cnf
  notify: 
   - restart mysql

- name: Start the mysql service
  service: name=mysqld state=started enabled=yes

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_pass }} state=present
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost' 

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_pass }}
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost'

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
   - localhost
   - "{{ ansible_fqdn }}"

- name: remove the test database
  mysql_db: name=test state=absent

- name: Create the databases
  mysql_db: name={{ item.name }} state=present
  with_items: mysql_db
  when: mysql_db|length > 0

- name: Create the database users
  mysql_user: name={{ item.name }} password={{ item.pass }}
                priv={{ item.priv|default("*.*:ALL") }} state=present host={{ item.host | default("localhost") }}
  with_items: mysql_users

- name: Create the replication users
  mysql_user: name={{ item.name }}  host="%" password={{ item.pass }}  
                priv=*.*:"REPLICATION SLAVE" state=present
  with_items: mysql_repl_users
  when: mysql_repl_users|length > 0

- name: Check if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_replicate is defined

- name: Get the current master servers replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replicate['master'] }}"
  register: repl_stat
  when: slave|failed and mysql_replicate is defined

- name: Change the master in slave to start the replication
  mysql_replication: mode=changemaster master_host={{ mysql_replicate['master'] }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_replicate['user'] }} master_password={{ mysql_replicate['pass'] }}
  when: slave|failed and mysql_replicate is defined